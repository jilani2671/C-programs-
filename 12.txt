Write a program to implement the tree traversal methods

#include <stdio.h>
#include <stdlib.h>
// Node structure for the binary tree
struct TreeNode
{
int data;
struct TreeNode *left;
struct TreeNode *right;
};
// Function to create a new node
struct TreeNode *createNode(int data)
{
struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct
TreeNode));
if (newNode == NULL)
{
printf("Memory allocation failed!\n");
exit(1);
}
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
// Function to perform pre-order traversal of the binary tree
void preOrderTraversal(struct TreeNode *root) 
{
if (root != NULL)
{
printf("%d ", root->data);
preOrderTraversal(root->left);
preOrderTraversal(root->right);
}
}
// Function to perform in-order traversal of the binary tree
void inOrderTraversal(struct TreeNode *root)
{
if (root != NULL)
{
inOrderTraversal(root->left);
printf("%d ", root->data);
inOrderTraversal(root->right);
}
}
// Function to perform post-order traversal of the binary tree
void postOrderTraversal(struct TreeNode *root)
{
if (root != NULL)
{
postOrderTraversal(root->left);
postOrderTraversal(root->right);
printf("%d ", root->data);
}
}
// Main function for testing
int main()
{
// Creating a sample binary tree
struct TreeNode *root = createNode(1);
root->left = createNode(2);
root->right = createNode(3);
root->left->left = createNode(4);
root->left->right = createNode(5);
root->right->left = createNode(6);
root->right->right = createNode(7);
printf("Pre-order Traversal: "); 
preOrderTraversal(root);
printf("\n");
printf("In-order Traversal: ");
inOrderTraversal(root);
printf("\n");
printf("Post-order Traversal: ");
postOrderTraversal(root);
printf("\n");
return 0;
} 
